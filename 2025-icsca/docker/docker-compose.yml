# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  # breaking changes in later versions
  image: quay.io/minio/minio:RELEASE.2022-01-27T03-53-02Z
  command: server --console-address ":9001"  http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: minio123
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  ### Database ###
  db:
    build:
      context: ./db
    environment:
      POSTGRES_USERS: 'planqk:planqk|patternatlas:patternatlas|qprov:qprov'
      POSTGRES_DATABASES: 'planqk:planqk|patternatlas:patternatlas|qprov:qprov'
      QC_ATLAS_CONTENT_REPOSITORY_BRANCH: 'master'
      ATLAS_DB: planqk
      PATTERNATLAS_DB: patternatlas
    ports:
      - '5060:5060'
    networks:
      - pattern-based-solutions


  ### QC Atlas ###
  qc-atlas:
    image: planqk/atlas:v3.1.4
    depends_on:
      - db
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: planqk
      POSTGRES_PASSWORD: planqk
      POSTGRES_DB: planqk
    ports:
      - "6626:6626"
    networks:
      - pattern-based-solutions

  #######################
  ### Pattern Atlas ###
  pattern-atlas-api:
    image: patternatlas/pattern-atlas-api:v1.9.0
    environment:
      JDBC_DATABASE_URL: db
      JDBC_DATABASE_USERNAME: patternatlas
      JDBC_DATABASE_PASSWORD: patternatlas
      JDBC_DATABASE_PORT: 5060
      DB_INIT_USER: patternatlas
      LATEX_RENDERER_HOST_NAME: latex-renderer
      LATEX_RENDERER_PORT: 5030
      JDBC_DATABASE_NAME: patternatlas
      PATTERN_ATLAS_FETCH_INITIAL_DATA: 'true'
      HAL_EXPLORER: 'false'
      # activate correct application properties
      SPRING_PROFILES_ACTIVE: docker
      SECURITY_LOGLEVEL: info
      DB_INIT_PASSWORD: patternatlas
    ports:
      - "1977:1977"
    networks:
      - pattern-based-solutions
    depends_on:
      - db
      - latex-renderer

  # contains more information regarding the patterns
  pattern-atlas-ui:
    image: patternatlas/pattern-atlas-ui:v1.5.8
    platform: linux/x86_64
    environment:
      ATLAS_HOST_NAME: $PUBLIC_HOSTNAME
      ATLAS_PORT: 6626
      TEXT_MATCHING_HOST_NAME: $PUBLIC_HOSTNAME
      TEXT_MATCHING_PORT: 1985
      PATTERN_ATLAS_API_HOST_NAME: $PUBLIC_HOSTNAME
      PATTERN_ATLAS_API_PORT: 1977
      LATEX_RENDERER_HOST_NAME: $PUBLIC_HOSTNAME
      OPENTOSCA_CONTAINER_HOST_NAME: $PUBLIC_HOSTNAME
      OPENTOSCA_CONTAINER_PORT: 1337
      WINERY:HOST_NAME: $PUBLIC_HOSTNAME
      WINERY_PORT: 8093
      LATEX_RENDERER_PORT: 5030
      URL_SCHEME: http
    ports:
      - "1978:80"
    networks:
      - pattern-based-solutions

  # required by the pattern atlas to render latex
  latex-renderer:
    image: planqk/latex-renderer:v1.1.1
    platform: linux/amd64
    ports:
      - "5030:5030"
    networks:
      - pattern-based-solutions
  # end of Pattern Atlas
  #######################


  #######################
  ### OpenTOSCA Ecosystem ###
  container:
    image: opentosca/container:v3.1.4
    ports:
      - '1337:1337'
      - '8081-8087:8081-8087'
    environment:
      CONTAINER_HOSTNAME: $PUBLIC_HOSTNAME
      ENGINE_IA_HOSTNAME: engine-ia-jdk8
      ENGINE_IA_PORT: 8080
      ENGINE_IA_JAVA17_HOSTNAME: engine-ia-jdk17
      ENGINE_IA_JAVA17_PORT: 8080
      ENGINE_PLAN_BPEL_HOSTNAME: engine-plan
      CONTAINER_DEPLOYMENT_TESTS: 'false'
    networks:
      - pattern-based-solutions

  engine-plan:
    image: opentosca/ode:v2.4.0
    ports:
      - '9763:9763'
    networks:
      - pattern-based-solutions

  engine-ia-jdk8:
    image: opentosca/engine-ia:v2.1.0
    ports:
      - '8091:8080'
    networks:
      - pattern-based-solutions
  engine-ia-jdk17:
    image: opentosca/engine-ia:latest-jdk17
    ports:
      - '7424:8080'
    networks:
      - pattern-based-solutions
  winery:
    build: initialized-winery
    logging:
      driver: none
    ports:
      - '8093:8080'
    environment:
      WINERY_HOSTNAME: $PUBLIC_HOSTNAME
      WORKFLOWMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      TOPOLOGYMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      CONTAINER_HOSTNAME: $PUBLIC_HOSTNAME
    networks:
      - pattern-based-solutions
  ui:
    image: opentosca/ui:latest
    environment:
      API_ENDPOINT_HOST: ${PUBLIC_HOSTNAME}
      API_ENDPOINT_PORT: 1337
      WINERY_HOST: ${PUBLIC_HOSTNAME}
      WINERY_PORT: 8093
    ports:
      - '8088:8080'
    networks:
      - pattern-based-solutions

  dind:
    image: docker:20.10-dind
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=
    ports:
      - '2222:2375'
      - '9990-9999:9990-9999'
      - '9990-9999:9990-9999/udp'
    networks:
      - pattern-based-solutions
  # end of OpenTOSCA Ecosystem
  #######################

  ### Text Matching Backend ###
  text-matching-backend:
    image: stiliala/text-matching-server:local
    environment:
      - OPENAI_API_KEY=""
    ports:
      - '1985:1985'
    networks:
      - pattern-based-solutions

  


## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  script_data:
  exec_data:

networks:
  pattern-based-solutions:
    driver: bridge
