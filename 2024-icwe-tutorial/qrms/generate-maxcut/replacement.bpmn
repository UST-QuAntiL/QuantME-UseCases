<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:opentosca="https://github.com/UST-QuAntiL/OpenTOSCA" id="Definitions_0b7il2s" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20220628">
  <bpmn:process id="Process_03tgi13" isExecutable="true">
    <bpmn:serviceTask id="ServiceTask_1d6l6i9" name="Generate Circuits" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_w1/?csar">
       <bpmn:extensionElements>
         <camunda:connector>
           <camunda:inputOutput>
             <camunda:inputParameter name="method">POST</camunda:inputParameter>
             <camunda:inputParameter name="headers">
               <camunda:map>
                 <camunda:entry key="Accept">application/json</camunda:entry>
                 <camunda:entry key="Content-Type">application/json</camunda:entry>
               </camunda:map>
             </camunda:inputParameter>
             <camunda:inputParameter name="url">algorithms/qaoa/maxcut</camunda:inputParameter>
             <camunda:inputParameter name="payload">
               <camunda:script scriptFormat="groovy">
   import groovy.json.JsonBuilder
   def adjMatrix = execution.getVariable("adjMatrix");

   if (adjMatrix instanceof String) {
 	println("Received adjMatrix of type string: " + adjMatrix);
 	adjMatrix = adjMatrix.drop(1).take(adjMatrix.length()-2);
 	adjMatrix= adjMatrix.replaceAll("\\s","").split("\\],\\[");
 	println("Separated adjMatrix: " + adjMatrix.toString());

 	new_adjMatrix = []
 	for (el in adjMatrix){
 		def current_array = el.replaceAll("\\[","").replaceAll("\\]","")
 		println("Current array: " + current_array.toString());
 		new_arr = [];
 		def numbers = current_array.split(",");
 		println("Numbers: " + numbers.toString());

 		for (number in numbers){
 			new_arr.push(number.toDouble());
 		}
 		new_adjMatrix.push(new_arr);
 	}

 	adjMatrix = new_adjMatrix;
 	println("adjMatrix after parsing: " + adjMatrix.toString());
 	execution.setVariable("adjMatrix", adjMatrix);
   }

   def request = [:];
   request.put("adj_matrix", adjMatrix);
   request.put("parameterized", "true");
   request.put("circuit_format", "openqasm3");
   request.put("p", 1);
   if (execution.getVariable("wsBitstring") != null) {
     request.put("initial_state", execution.getVariable("wsBitstring"));
   }
   requeststring = new JsonBuilder(request).toPrettyString()
 print(requeststring)
   return requeststring;
 </camunda:script>
             </camunda:inputParameter>
             <camunda:outputParameter name="circuit">
               <camunda:script scriptFormat="groovy">
 def resp = connector.getVariable("response");
 resp = new groovy.json.JsonSlurper().parseText(resp)
 circuit= resp.get('circuit')
 println(circuit);
 return [circuit];</camunda:script>
             </camunda:outputParameter>
             <camunda:outputParameter name="circuitDepthUntranspiled">
               <camunda:script scriptFormat="groovy">
 def resp = connector.getVariable("response");
 resp = new groovy.json.JsonSlurper().parseText(resp)
 depth= resp.get('depth')
 println(depth);
 return depth;</camunda:script>
             </camunda:outputParameter>
             <camunda:outputParameter name="circuitNumQubits">
               <camunda:script scriptFormat="groovy">
 def resp = connector.getVariable("response");
 resp = new groovy.json.JsonSlurper().parseText(resp)
 n_qubits= resp.get('n_qubits')
 println(n_qubits);
 return n_qubits;</camunda:script>
             </camunda:outputParameter>
           </camunda:inputOutput>
           <camunda:connectorId>http-connector</camunda:connectorId>
         </camunda:connector>
         <camunda:inputOutput />
       </bpmn:extensionElements>
     </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_03tgi13">
      <bpmndi:BPMNShape id="ServiceTask_1d6l6i7_di" bpmnElement="ServiceTask_1d6l6i9">
        <dc:Bounds x="160" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
