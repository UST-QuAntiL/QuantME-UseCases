<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" id="Definitions_0b7il2s" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20220628">
  <bpmn:process id="Process_03tgi13" isExecutable="true">
    <bpmn:serviceTask id="ServiceTask_1d6l6i9" name="Warm-Start Quantum Algorithm" camunda:asyncAfter="true" camunda:exclusive="false">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/warm-starting/initialStateMaxCut</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">import groovy.json.JsonBuilder
println("Start Warmstarting");
def matrix = execution.getVariable("adjMatrix");

if (matrix instanceof String) {
    println("Received matrix of type string: " + matrix);
    matrix = matrix.drop(1).take(matrix.length()-2);
    matrix= matrix.replaceAll("\\s","").split("\\],\\[");
    println("Separated matrix: " + matrix.toString());

    new_matrix = []
    for (el in matrix){
        def current_array = el.replaceAll("\\[","").replaceAll("\\]","")
        println("Current array: " + current_array.toString());
        new_arr = [];
        def numbers = current_array.split(",");
        println("Numbers: " + numbers.toString());

        for (number in numbers){
            new_arr.push(number.toDouble());
        }
        new_matrix.push(new_arr);
    }

    matrix = new_matrix;
    println("Matrix after parsing: " + matrix.toString());
    execution.setVariable("adjMatrix", matrix);
}

def request = [:];
request.put("graph", matrix);
if (execution.getVariable("classicalAlgorithm") != null){
    request.put("classicalAlgorithm", execution.getVariable("classicalAlgorithm"));
}
if (execution.getVariable("repetitions") != null){
    request.put("repetitions", execution.getVariable("repetitions"));
}
if (execution.getVariable("rounded") != null){
    request.put("rounded", execution.getVariable("rounded"));
}
requeststring = new JsonBuilder(request).toPrettyString()
println(requeststring);
return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="wsBitstring">
              <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
println("Response to extract wsBitstring: " + resp.toString());
wsBitstring= resp.get('bitstring')
println(wsBitstring);
return wsBitstring;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="wsValue">
              <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
println("Response to extract wsValue: " + resp.toString());
wsValue= resp.get('value')
println(wsValue);
return wsValue;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
    </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_03tgi13">
      <bpmndi:BPMNShape id="ServiceTask_1d6l6i7_di" bpmnElement="ServiceTask_1d6l6i9">
        <dc:Bounds x="160" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
