version: '3'

services:
  #############
  # Databases #
  #############

  db:
    image: ghcr.io/philwun/docker-postgres-multi:master
    environment:
        # specifies user:password for each container
        POSTGRES_USERS: patternatlas:patternatlas|nisq:nisq|qprov:qprov
        # specifies database:user for each container
        POSTGRES_DATABASES: patternatlas:patternatlas|nisq:nisq|qprov:qprov
    ports:
        - "5061:5432"
    networks:
      - planqk-demo
  
  redis:
    image: redis:6.2.2
    ports:
      - "5040:5040"
    command: --port 5040
    networks:
      - planqk-demo

  ###################################
  # Workflow Modeler + dependencies #
  ###################################

  workflow-modeler:
    image: planqk/workflow-modeler:latest
    environment:
     CAMUNDA_ENDPOINT: http://localhost:8090/engine-rest
     PATTERN_ATLAS_ENDPOINT: http://localhost:1977/patternatlas/patternLanguages/af7780d5-1f97-4536-8da7-4194b093ab1d
    ports:
      - 8080:8080
    networks:
      - planqk-demo

  camunda-engine:
    image: camunda/camunda-bpm-platform:run-7.19.0
    ports:
      - 8090:8080
    networks:
      - planqk-demo

  ################################
  # Pattern Atlas + dependencies #
  ################################

  pattern-atlas-api:
    image: patternatlas/pattern-atlas-api:latest
    environment:
      JDBC_DATABASE_URL: db
      JDBC_DATABASE_USERNAME: patternatlas
      JDBC_DATABASE_PASSWORD: patternatlas
      JDBC_DATABASE_PORT: 5432
      DB_INIT_USER: patternatlas
      DB_INIT_PASSWORD: patternatlas
      LATEX_RENDERER_HOST_NAME: latex-renderer
      LATEX_RENDERER_PORT: 5030
      JDBC_DATABASE_NAME: patternatlas
      PATTERN_ATLAS_FETCH_INITIAL_DATA: 'true'
      HAL_EXPLORER: 'false'
      #PATTERN_ATLAS_CONTENT_REPOSITORY_BRANCH: feature/known_uses
      # activate correct application properties
      SPRING_PROFILES_ACTIVE: docker
      JWK_URI: http://auth:8080/realms/patternatlas/protocol/openid-connect/certs
      SECURITY_LOGLEVEL: info
    ports:
      - "1977:1977"
    networks:
      - planqk-demo
    depends_on:
      - db
      - latex-renderer
    restart: on-failure

  pattern-atlas-ui:
    image: patternatlas/pattern-atlas-ui:v1.5.6
    platform: linux/x86_64
    depends_on:
      - config-server
    environment:
      # because the requests are performed from the browser and not
      # from the container itself we have to specify localhost here
      # and **not** the container name
      PATTERN_ATLAS_API_HOST_NAME: localhost
      PATTERN_ATLAS_API_PORT: 1977
      LATEX_RENDERER_HOST_NAME: localhost
      LATEX_RENDERER_PORT: 5030
      URL_SCHEME: http
      AUTH_REALM_URL: http://localhost:7080/realms/patternatlas
    ports:
      - "1978:80"
    networks:
      - planqk-demo

  auth:
    image: quay.io/keycloak/keycloak:18.0.0
    command: start-dev --import-realm
    volumes:
      - ./keycloak_import:/opt/keycloak/data/import
    environment:
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
    ports:
      - "7080:8080"
    networks:
      - planqk-demo

  config-server:
    image: quay.io/coreos/etcd:v3.5.9
    environment:
      ETCD_NAME: config-node1
      ETCD_CORS: "*"
      ETCD_ADVERTISE_CLIENT_URLS: "http://config-server:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCDCTL_API: 3
    ports:
      - "2379:2379"
    networks:
      - planqk-demo

  # used by the pattern atlas to render latex
  latex-renderer:
    image: planqk/latex-renderer:v1.1.1
    ports:
      - "5030:5030"
    networks:
      - planqk-demo

################################
# Nisq Analyzer + dependencies #
################################

  nisq-analyzer:
    image: planqk/nisq-analyzer:latest
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: nisq
      POSTGRES_PASSWORD: nisq
      POSTGRES_DB: nisq

      # activate correct application properties
      SPRING_PROFILES_ACTIVE: docker

      # Configure QPROV connection
      QPROV_HOSTNAME: qprov
      QPROV_PORT: 5020
      TRANSLATOR_HOSTNAME: quantum-transpiler
      TRANSLATOR_PORT: 5012
      # Configuration of the SDK Connector Services
      QISKIT_HOSTNAME: qiskit-service
      QISKIT_PORT: 5013
      PYTKET_HOSTNAME: pytket-service
      PYTKET_PORT: 5015
      # Configure Prioritization Service connection
      PRIORITIZATION_HOSTNAME: qhana-plugin-runner
      PRIORITIZATION_PORT: 8080
    ports:
      - '5010:5010'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - planqk-demo

  nisq-analyzer-ui:
    image: planqk/nisq-analyzer-ui:latest
    environment:
      NISQ_ANALYZER_HOST_NAME: localhost
      NISQ_ANALYZER_PORT: 5010
    ports:
      - '5009:80'
    networks:
      - planqk-demo

  qprov:
    image: planqk/qprov:latest
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
    ports:
      - "5020:5020"
    networks:
      - planqk-demo

  qprov-collector-ibm:
    image: planqk/qprov-collector:latest
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
      QPROV_IBMQ_TOKEN: ''
      QPROV_IBMQ_EXECUTE_CIRCUITS: 'false'
      QPROV_IBMQ_AUTO_COLLECT: 'true'
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL: 60
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL_CIRCUITS: 180
      QISKIT_SERVICE_HOSTNAME: qiskit-service
      QISKIT_SERVICE_PORT: 5013
    ports:
      - "5021:5021"
    networks:
      - planqk-demo

  quantum-transpiler:
    image: planqk/quantum-transpiler-backend:latest
    ports:
     - '5012:5012'
    networks:
     - planqk-demo

  quantum-transpiler-frontend:
    image: planqk/quantum-transpiler-frontend:latest
    ports:
     - '5011:80'
    networks:
     - planqk-demo
  
  qiskit-service:
    image: planqk/qiskit-service:latest
    command: sh /app/startup.sh
    ports:
      - "5013:5013"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - planqk-demo

  qiskit-rq-worker:
    image: planqk/qiskit-service:latest
    command: rq worker --url redis://redis:5040 qiskit-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    deploy:
      replicas: 1
    networks:
      - planqk-demo
  
  pytket-service:
    image: planqk/pytket-service:latest
    command: sh /app/startup.sh
    ports:
      - "5015:5015"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - planqk-demo

  pytket-rq-worker:
    image: planqk/pytket-service:latest
    command: rq worker --url redis://redis:5040 pytket-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    networks:
      - planqk-demo

networks:
  planqk-demo:
    driver: bridge
volumes:
  exec_data:
