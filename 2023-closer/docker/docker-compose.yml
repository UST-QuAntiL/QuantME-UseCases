version: '3'

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  exec_data:



services:
  ### Camunda Engine ###
  camunda-engine:
    build: camunda
    ports:
      - 8080:8080
    networks:
      - quokka

  ### Error-Mitigation Service ###
  minio1:
    image: quay.io/minio/minio:RELEASE.2022-01-27T03-53-02Z
    command: server --console-address ":9001"  http://minio{1...2}/data{1...2} 
    expose:
    - "9000"
    - "9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - quokka
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
  minio2:
    image: quay.io/minio/minio:RELEASE.2022-01-27T03-53-02Z
    command: server --console-address ":9001"  http://minio{1...2}/data{1...2} 
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - quokka
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
    networks:
      - quokka
  error-mitigation-service:
    image: planqk/error-mitigation-service:latest
    command: app.py
    ports:
      - "5071:5071"
    environment:
      - MINIO_URL=nginx:9000
    depends_on:
      - nginx
    networks:
      - quokka
      
  execution-service:
    image: planqk/execution-service:latest
    build: ./services/execution-service
    ports:
      - '5075:5075'
    networks:
      - quokka
      
  optimization-service:
    image: planqk/optimization-service:latest
    build: ./services/optimization-service
    ports:
      - '5074:5074'
    networks:
      - quokka
    env_file:
     - ip.env
      
  objective-evaluation-service:
    image: planqk/objective-evaluation-service:latest
    ports:
      - '5072:5072'
    networks:
      - quokka
      
  circuit-generation-service:
    image: planqk/quantum-circuit-generator:latest
    ports:
      - '5073:5073'
    networks:
      - quokka
  circuit-cutting-service:
    image: planqk/circuit-cutting-service:latest
    ports:
      - '5076:5076'
    networks:
      - quokka
  warm-starting-service:
    image: planqk/warm-starting-service:latest
    ports:
      - '5077:5077'
    networks:
      - quokka

  quokka-gateway:
    image: planqk/quokka-gateway:0.2.0
    ports:
      - '6474:6474'
    networks:
      - quokka

  #######################
  ### qiskit service ####
  redis:
    image: redis:latest
    command: --port 5040
    ports:
      - "5040:5040"
    networks:
      - quokka

  qiskit-service:
    image: planqk/qiskit-service:latest
    command: sh /app/startup.sh
    ports:
      - "5013:5013"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - quokka

  qiskit-rq-worker:
    image: planqk/qiskit-service:latest
    command: rq worker --url redis://redis:5040 qiskit-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    deploy:
      replicas: 2
    networks:
      - quokka

  rq-dashboard:
    image: eoranged/rq-dashboard
    ports:
      - "9181:9181"
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://redis:5040
    networks:
      - quokka
  # end of qiskit service
  ########

networks:
  quokka:
    driver: bridge

