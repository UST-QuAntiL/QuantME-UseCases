<?xml version="1.0" encoding="UTF-8"?>
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:opentosca="https://github.com/UST-QuAntiL/OpenTOSCA" id="sample-diagram" targetNamespace="http://bpmn.io/schema/bpmn" xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd">
  <bpmn2:process id="Process_1" isExecutable="true">
    <bpmn2:serviceTask id="Activity_0roh3lo" name="Execute Circuit" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitExecutionService_w1/?csar">
      <bpmn2:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">execution-service</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">
import groovy.json.JsonBuilder
  def qpu = execution.getVariable("qpu");
  def circuit = execution.getVariable("circuit");
  def token = execution.getVariable("token");
  def credentials = [:];
  credentials.put("token", token);
  credentials.put("hub", "ibm-q");
  credentials.put("group", "open")
  credentials.put("project", "main");
  credentials.put("url", "https://auth.quantum-computing.ibm.com/api");
  def request = [:];
  request.put("qpu", qpu);
  request.put("credentials", credentials)
  request.put("shots", 2000);
  request.put("circuit", circuit);
  request.put("circuit_format", "openqasm");
  request.put("provider", "ibm");

  requeststring = new JsonBuilder(request).toPrettyString()
println(requeststring);
  return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="counts">
              <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp);
println(resp);
counts_array= [];
for (el in resp){
println(el);
   counts_array.push(el.get('counts'));
}
println(counts_array);
counts_array;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="measQubits">
              <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp);
println(resp);
meas_qubits_array = [];
for (el in resp){
   meas_qubits_array.push(el.get('meas_qubits'));
}
println(meas_qubits_array);
return meas_qubits_array;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="circuitDepthTranspiled">
              <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp)
println(resp);
transpiled_circuit_depth_array = [];
for (el in resp){
println(el);
   transpiled_circuit_depth_array.push(el.get('transpiled_circuit_depth'));
}
println(transpiled_circuit_depth_array);
return transpiled_circuit_depth_array;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="executionProbabilityDistribution">
              <camunda:script scriptFormat="Groovy">import org.camunda.bpm.engine.variable.value.FileValue
            	import org.camunda.bpm.engine.variable.Variables
                import groovy.json.JsonSlurper
                def slurper = new JsonSlurper().parseText(response)
            	String filename = "ExecutionProbabilityDistribution.png";
            	FileValue typedFileValue = Variables.fileValue(filename).file(slurper[0].visualization.decodeBase64()).mimeType("application/png").create()
                typedFileValue
              </camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="provider">ibm</camunda:inputParameter>
          <camunda:inputParameter name="qpu">aer_qasm_simulator</camunda:inputParameter>
          <camunda:inputParameter name="shots">1000</camunda:inputParameter>
          <camunda:inputParameter name="programmingLanguage">openqasm3Shor</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn2:extensionElements>
    </bpmn2:serviceTask>
  </bpmn2:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="Activity_1skhgqo_di" bpmnElement="Activity_0roh3lo">
        <dc:Bounds x="236" y="0" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn2:definitions>
