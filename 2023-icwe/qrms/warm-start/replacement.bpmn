<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" id="Definitions_0b7il2s" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20220628">
  <bpmn:process id="Process_03tgi13" isExecutable="true">
    <bpmn:serviceTask id="ServiceTask_1d6l6i9" name="Warm-Start Quantum Algorithm">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://192.168.178.107:5077/initialStateMaxCut</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print("Start Warmstarting");
                var matrix = execution.getVariable("adjMatrix");
                matrix = matrix.substring(1,matrix.length-1).replaceAll(" ", "");
                matrix = matrix.split("],[");
								new_matrix = []
                for each (var arr in matrix) {
                  new_arr = []
                  arr = arr.replace("[","").replace("]","")
                  numbers = arr.split(",")
                  for each (var num in numbers){
                    new_arr.push(parseFloat(num))
                  }
                  new_matrix.push(new_arr)
                }
               
                var myJson = {"graph": new_matrix};
                
                if (execution.getVariable("classicalAlgorithm") !== null){
                	myJson["classicalAlgorithm"]= execution.getVariable("classicalAlgorithm")
                }
				if (execution.getVariable("repetitions") !== null){
                	myJson["repetitions"]= execution.getVariable("repetitions")
				}
				if (execution.getVariable("rounded") !== null){
                	myJson["rounded"]= execution.getVariable("rounded")
				}

                myJson = JSON.stringify(myJson);
                print(myJson);
myJson =myJson;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="wsBitstring">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable("response")
                resp = JSON.parse(resp)
                var bitstring = resp.bitstring;
                print(bitstring)
								bitstring;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="wsValue">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable("response")
                resp = JSON.parse(resp)
                var value = resp.value;
                print(value)
				value;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
    </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_03tgi13">
      <bpmndi:BPMNShape id="ServiceTask_1d6l6i7_di" bpmnElement="ServiceTask_1d6l6i9">
        <dc:Bounds x="160" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>